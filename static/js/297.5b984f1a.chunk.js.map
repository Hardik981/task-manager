{"version":3,"file":"static/js/297.5b984f1a.chunk.js","mappings":"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","sources":["../node_modules/react-editext/src/utils.ts","../node_modules/react-editext/node_modules/style-inject/dist/style-inject.es.js","../node_modules/react-editext/src/index.tsx","webpack://task-manager/./src/css/tasks.module.css?27b8","pages/Tasks.js"],"sourcesContent":["export function classnames(...args: any[]) {\n  /**\n   * Our simple classnames replica.\n   * This is enough for me.\n   */\n  return Array(...args)\n    .filter((a) => a)\n    .join(' ');\n}\n\nexport const dataAttributes = {\n  /**\n   * This is for the end user. You can use below attributes if you want to\n   * style this component with `styled-components` or something like that.\n   * Example notation:\n   * <div class=\"EdiText_Buttons__container_34fgAsdf\" editext=\"button-container\">\n   * Example usage with styled-components:\n\n    const StyledEdiText = styled(EdiText)`\n      button[editext=\"edit-button\"] {\n        color: #000;\n      }\n      button[editext=\"save-button\"] {\n        background:#587C0C;\n        color: #fff;\n      }\n      input, textarea {\n        background: #1D2225;\n        color: #F4C361;\n        font-weight: bold;\n      }\n    `\n   */\n  mainContainer: 'main-container',\n  viewContainer: 'view-container',\n  buttonContainer: 'button-container',\n  editContainer: 'edit-container',\n  editButton: 'edit-button',\n  saveButton: 'save-button',\n  cancelButton: 'cancel-button',\n  input: 'input',\n  hint: 'hint',\n};\n\nexport const cancelOnConflictMessage =\n  'EdiText: Both `cancelOnUnfocus` and `submitOnUnfocus` are set to true. ' +\n  '`submitOnUnfocus` is ignored in this case. Please remove one of these.';\n\nexport const defaultValidationMessage = 'Invalid Value';\n\nexport function getCanEdit(\n  canEdit: boolean | (() => boolean) | undefined\n): boolean {\n  if (canEdit === undefined) {\n    return true;\n  }\n  return typeof canEdit === 'function' ? canEdit() : canEdit;\n}\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","/* eslint-disable react/prop-types */\nimport React, {\n  useEffect,\n  KeyboardEvent,\n  FocusEvent,\n  useState,\n  ChangeEvent,\n} from 'react';\nimport styles from './styles.module.css';\nimport {\n  cancelOnConflictMessage,\n  dataAttributes,\n  classnames,\n  defaultValidationMessage,\n  getCanEdit,\n} from './utils';\n\nexport type EdiTextType =\n  | 'text'\n  | 'textarea'\n  | 'email'\n  | 'number'\n  | 'date'\n  | 'datetime-local'\n  | 'time'\n  | 'month'\n  | 'url'\n  | 'week'\n  | 'tel';\n\nexport type ButtonsAlignment = 'after' | 'before';\n\nexport type InputProps =\n  | React.DetailedHTMLProps<\n      React.InputHTMLAttributes<HTMLInputElement>,\n      HTMLInputElement\n    >\n  | React.DetailedHTMLProps<\n      React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n      HTMLTextAreaElement\n    >;\nexport interface EdiTextProps {\n  /**\n   * Props to be passed to input element.\n   * Any kind of valid DOM attributes are welcome\n   */\n  inputProps?: InputProps;\n  /**\n   * Props to be passed to div element that shows the text.\n   * You can specify your own `styles` or `className`\n   */\n  viewProps?: React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  >;\n  /**\n   * Props to be passed to edit button.\n   * You can set `styles`, `className or disabled state.\n   */\n  editButtonProps?: React.DetailedHTMLProps<\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  >;\n  /**\n   * Class name for the root container of the EdiText.\n   */\n  className?: string;\n  /**\n   * Props to be passed to div element that is container for all elements.\n   * You can use this if you want to style or select the whole container.\n   */\n  containerProps?: React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  >;\n  /**\n   * Value of the content [in view mode] and input [in edit mode]\n   */\n  value: string;\n  /**\n   * A simple hint message appears at the bottom of input element.\n   * Any valid element is allowed.\n   */\n  hint?: React.ReactNode;\n  /**\n   * If validation fails this message will appear\n   */\n  validationMessage?: any;\n  /** Pass your own validation function.\n   * takes one param -> `value`.\n   * It must return `true` or `false`\n   */\n  validation?: (...args: string[]) => boolean;\n  /**\n   * will be called when validation fails.\n   * takes one param <value> which is the current value of input\n   */\n  onValidationFail?: (...args: string[]) => any;\n  /**\n   * Input type. Possible options are:\n   * `text`, `number`, `email`, `textarea`, `date`,\n   * `datetime-local`, `time`, `month`, `url`, `week`, `tel`\n   * @default \"text\"\n   */\n  type?: EdiTextType;\n  /**\n   * will be called when user clicked cancel button\n   * @param value the current value of input when cancelled.\n   * @param inputProps inputProps that passed to the element.\n   */\n  onCancel?: (value: any, inputProps?: InputProps) => any;\n  /**\n   * will be called when user clicked save button.\n   * @param value the current value of input\n   * @param inputProps inputProps that passed to the element.\n   */\n  onSave: (value: any, inputProps?: InputProps) => any;\n  /**\n   * Custom class name for SAVE button.\n   * */\n  saveButtonClassName?: string;\n  /**\n   * Custom class name for EDIT button.\n   * */\n  editButtonClassName?: string;\n  /**\n   * Custom class name for CANCEL button. */\n  cancelButtonClassName?: string;\n  /**\n   * Content for CANCEL button. Any valid element and node are allowed. */\n  cancelButtonContent?: any;\n  /**\n   * Content for SAVE button. Any valid element and node are allowed. */\n  saveButtonContent?: any;\n  /**\n   * Content for EDIT button. Any valid element and node are allowed. */\n  editButtonContent?: any;\n  /**\n   * Set it to `true` if you don't want to see default icons\n   * on action buttons.See Examples page for more details.\n   * @default \"false\"\n   */\n  hideIcons?: boolean;\n  /**\n   * Decides whether buttons will be located _BEFORE_ or _AFTER_\n   * the input element.\n   * @default \"after\"\n   */\n  buttonsAlign?: ButtonsAlignment;\n  /**\n   * Custom class name for the container in view mode.\n   */\n  viewContainerClassName?: string;\n  /**\n   * Custom class name for the container in edit mode.\n   * Will be set to viewContainerClassName if you set it and omit this.\n   */\n  editContainerClassName?: string;\n  /**\n   * Custom class name for the top-level main container.\n   * @deprecated please use `containerProps` instead of this\n   */\n  mainContainerClassName?: string;\n  /**\n   * Set it to `true` if you want clicking on the view to activate the editor.\n   * @default false\n   */\n  editOnViewClick?: boolean;\n  /**\n   * Set it to `true` if you want the view state to be edit mode\n   * @default false\n   */\n  editing?: boolean;\n  /**\n   * control function that will be called when user clicks on the edit button.\n   * return false to prevent editing or return true to allow editing.\n   */\n  canEdit?: boolean | (() => boolean);\n  /**\n   * Will be called when the editing mode is active.\n   *\n   * @param value the value of the input at the time when editing started.\n   * @param inputProps inputProps that passed to the element.\n   */\n  onEditingStart?: (value: any, inputProps?: InputProps) => any;\n  /**\n   * Set it to `true` if you want to display action buttons **only**\n   * when the text hovered by the user.\n   * @default false\n   */\n  showButtonsOnHover?: boolean;\n  /**\n   * Set it to `true` if you want to submit the form when `Enter`\n   * is pressed.\n   * @default false\n   */\n  submitOnEnter?: boolean;\n  /**\n   * Set it to `true` if you want to cancel the form when `Escape`\n   * is pressed.\n   * @default false\n   */\n  cancelOnEscape?: boolean;\n  /**\n   * Set it to `true` if you want to cancel the form when the input\n   * is unfocused.\n   * @default false\n   */\n  cancelOnUnfocus?: boolean;\n  /**\n   * Set it to `true` if you want to save the form when the input\n   * is unfocused.\n   * @default false\n   */\n  submitOnUnfocus?: boolean;\n  /**\n   * An helper shortcut in case you want to pass the same tabIndex to both\n   * `viewProps` and `inputProps`.\n   *\n   * NOTE: This will be overriden if you pass the tabIndex in `viewProps`\n   * or `inputProps`.\n   */\n  tabIndex?: number;\n  /**\n   * Activates the edit mode when the view container is in focus.\n   */\n  startEditingOnFocus?: boolean;\n  /**\n   * Activates the edit mode when the `Enter` key is pressed if the view\n   * container is focused.\n   *\n   * NOTE: This requires the element to be in focus.\n   */\n  startEditingOnEnter?: boolean;\n  /**\n   * Custom render method for the content in the view mode.\n   * Use this prop to customize the displayed value in view mode.\n   * The return value from this function will be rendered in view mode.\n   * You can return string or JSX. Both are allowed.\n   */\n  renderValue?: (value: any) => any;\n}\n\nfunction EdiText(props: EdiTextProps) {\n  // state\n  const [editingInternal, setEditingInternal] = useState(props.editing);\n  const [valid, setValid] = useState<boolean>(true);\n  const [valueInternal, setValueInternal] = useState<string>(props.value || '');\n  const [savedValue, setSavedValue] = useState<string | undefined>(undefined);\n  const [viewFocused, setViewFocused] = useState<boolean>(false);\n  // refs\n  const saveButton = React.createRef<HTMLButtonElement>();\n  const editingContainer = React.createRef<HTMLDivElement>();\n  const editingButtons = React.createRef<any>();\n\n  useEffect(() => {\n    if (props.cancelOnUnfocus && props.submitOnUnfocus) {\n      console.warn(cancelOnConflictMessage);\n    }\n  }, [props.cancelOnUnfocus, props.submitOnUnfocus]);\n\n  useEffect(() => {\n    if (props.value !== undefined) {\n      setValueInternal(props.value);\n      setSavedValue(props.value);\n    }\n\n    if (props.editing !== undefined) {\n      setEditingInternal(props.editing);\n    }\n  }, [props.editing, props.value]);\n\n  function handleKeyDown(e: KeyboardEvent<any>): void {\n    const isEnter = [13, 'Enter'].some((c) => e.key === c || e.code === c);\n    const isEscape = [27, 'Escape', 'Esc'].some(\n      (c) => e.code === c || e.key === c\n    );\n    if (isEnter) {\n      props.submitOnEnter && handleSave();\n      e?.preventDefault();\n    }\n    if (isEscape) {\n      props.cancelOnEscape && handleCancel();\n      e.preventDefault();\n    }\n    props.inputProps?.onKeyDown && props.inputProps.onKeyDown(e);\n  }\n\n  function handleOnBlur(e: FocusEvent<any>): void {\n    const isEditingButton = editingButtons.current?.contains(e?.relatedTarget);\n    props.cancelOnUnfocus && !isEditingButton && handleCancel();\n    props.submitOnUnfocus &&\n      !isEditingButton &&\n      !props.cancelOnUnfocus &&\n      handleSave();\n    props.inputProps?.onBlur && props.inputProps.onBlur(e);\n  }\n\n  function handleViewFocus(e: FocusEvent<HTMLDivElement>): void {\n    setViewFocused(true);\n    props.startEditingOnFocus && setEditingInternal(true);\n    props.viewProps?.onFocus && props.viewProps.onFocus(e);\n  }\n\n  function handleKeyDownForView(e: KeyboardEvent<any>): void {\n    const isEnter = [13, 'Enter'].some((c) => e.key === c || e.code === c);\n    const startEditing = isEnter && viewFocused && props.startEditingOnEnter;\n    startEditing && e.preventDefault();\n    startEditing && setEditingInternal(true);\n    props.viewProps?.onKeyDown && props.viewProps.onKeyDown(e);\n  }\n\n  function handleInputChange(\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void {\n    setValid(true);\n    setValueInternal(e.target.value);\n    props.inputProps?.onChange?.(e as any);\n  }\n\n  function handleCancel(): void {\n    const val = savedValue ?? props.value;\n    setValid(true);\n    setEditingInternal(false);\n    setValueInternal(val);\n    props.onCancel?.(val, props.inputProps);\n  }\n\n  function handleActivateEditMode(): void {\n    if (getCanEdit(props.canEdit)) {\n      setEditingInternal(true);\n      props.onEditingStart?.(valueInternal, props.inputProps);\n    }\n  }\n\n  function handleSave(): void {\n    if (typeof props.validation === 'function') {\n      const isValid = props.validation(valueInternal);\n      if (!isValid) {\n        setValid(false);\n        props.onValidationFail && props.onValidationFail(valueInternal);\n        return;\n      }\n    }\n    setEditingInternal(false);\n    setSavedValue(valueInternal);\n    props.onSave(valueInternal, props.inputProps);\n  }\n\n  function _renderInput() {\n    if (props.type === 'textarea') {\n      return (\n        <textarea\n          className={styles.Editext__input}\n          // @ts-ignore\n          editext={dataAttributes.input}\n          // this is here because,\n          // we still allow people to pass the tabIndex via inputProps\n          // also backward compatibility.\n          tabIndex={props.tabIndex}\n          {...(props.inputProps as React.DetailedHTMLProps<\n            React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n            HTMLTextAreaElement\n          >)}\n          onBlur={handleOnBlur}\n          value={valueInternal}\n          onChange={handleInputChange}\n          autoFocus={editingInternal}\n        />\n      );\n    } else {\n      return (\n        <input\n          className={styles.Editext__input}\n          // @ts-ignore\n          editext={dataAttributes.input}\n          // this is here because,\n          // we still allow people to pass the tabIndex via inputProps\n          // also backward compatibility.\n          tabIndex={props.tabIndex}\n          {...props.inputProps}\n          onKeyDown={handleKeyDown}\n          onBlur={handleOnBlur}\n          value={valueInternal}\n          type={props.type || 'text'}\n          onChange={handleInputChange}\n          autoFocus={editingInternal}\n        />\n      );\n    }\n  }\n\n  function _renderEditingMode() {\n    const inputElem = _renderInput();\n    // calculate save button classes\n    const saveButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__save_button}`,\n      props.hideIcons && `${styles.Editext__hide_default_icons}`\n    );\n    const saveButtonClass =\n      props.saveButtonClassName || saveButtonDefaultClasses;\n    // calculate cancel button classes\n    const cancelButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__cancel_button}`,\n      props.hideIcons && `${styles.Editext__hide_default_icons}`\n    );\n    const cancelButtonClass =\n      props.cancelButtonClassName || cancelButtonDefaultClasses;\n    let editContainerClass = styles.Editext__editing_container;\n    if (props.editContainerClassName)\n      editContainerClass = props.editContainerClassName;\n    if (props.viewContainerClassName)\n      editContainerClass = props.viewContainerClassName;\n\n    const alignment = props.buttonsAlign || 'after';\n    const buttonsContainerClass = classnames(\n      styles.Editext__buttons_container,\n      alignment === 'before' && `${styles.Editext__buttons_before_aligned}`,\n      alignment === 'after' && `${styles.Editext__buttons_after_aligned}`\n    );\n    return (\n      <div>\n        <div\n          ref={editingContainer}\n          className={editContainerClass}\n          // @ts-ignore\n          editext={dataAttributes.editContainer}\n        >\n          {alignment === 'after' && inputElem}\n          <div className={buttonsContainerClass} ref={editingButtons}>\n            <button\n              ref={saveButton}\n              // @ts-ignore\n              editext={dataAttributes.saveButton}\n              type=\"button\"\n              className={saveButtonClass}\n              onClick={handleSave}\n            >\n              {props.saveButtonContent}\n            </button>\n            <button\n              type=\"button\"\n              // @ts-ignore\n              editext={dataAttributes.cancelButton}\n              className={cancelButtonClass}\n              onClick={handleCancel}\n            >\n              {props.cancelButtonContent}\n            </button>\n          </div>\n          {alignment === 'before' && inputElem}\n        </div>\n        {!valid && !props.onValidationFail && (\n          <div className={styles.Editext__validation_message}>\n            {props.validationMessage || defaultValidationMessage}\n          </div>\n        )}\n        {props.hint && (\n          <div\n            className={styles.Editext__hint}\n            // @ts-ignore\n            editext={dataAttributes.hint}\n          >\n            {props.hint}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  function _renderViewMode() {\n    // calculate edit button classes\n    const editButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__edit_button}`,\n      props.hideIcons && `${styles.Editext__hide_default_icons}`\n    );\n    const editButtonClass =\n      props.editButtonClassName || editButtonDefaultClasses;\n    const viewContainerClass = classnames(\n      props.viewContainerClassName || styles.Editext__view_container,\n      props.showButtonsOnHover &&\n        `${styles.Editext__buttons_showButtonsOnHover}`\n    );\n    const alignment = props.buttonsAlign || 'after';\n    const buttonsContainerClass = classnames(\n      styles.Editext__buttons_container,\n      alignment === 'before' && `${styles.Editext__buttons_before_aligned}`,\n      alignment === 'after' && `${styles.Editext__buttons_after_aligned}`\n    );\n    const viewClickHandler = props.editOnViewClick\n      ? handleActivateEditMode\n      : undefined;\n    const _value =\n      typeof props.renderValue === 'function'\n        ? props.renderValue(valueInternal)\n        : valueInternal;\n    return (\n      <div\n        className={viewContainerClass}\n        // @ts-ignore\n        editext={dataAttributes.viewContainer}\n      >\n        {alignment === 'after' && (\n          <div\n            // this is here because,\n            // we still allow people to pass the tabIndex via inputProps\n            // also backward compatibility.\n            tabIndex={props.tabIndex}\n            {...props.viewProps}\n            onKeyDown={handleKeyDownForView}\n            onFocus={handleViewFocus}\n            onClick={viewClickHandler}\n            // @ts-ignore\n            editext=\"view\"\n          >\n            {_value}\n          </div>\n        )}\n        <div className={buttonsContainerClass}>\n          <button\n            type=\"button\"\n            className={editButtonClass}\n            {...props.editButtonProps}\n            // @ts-ignore\n            editext={dataAttributes.editButton}\n            onClick={handleActivateEditMode}\n          >\n            {props.editButtonContent}\n          </button>\n        </div>\n        {alignment === 'before' && (\n          <div\n            // this is here because,\n            // we still allow people to pass the tabIndex via inputProps\n            // also backward compatibility.\n            tabIndex={props.tabIndex}\n            {...props.viewProps}\n            onKeyDown={handleKeyDownForView}\n            onFocus={handleViewFocus}\n            onClick={viewClickHandler}\n            // @ts-ignore\n            editext={dataAttributes.viewContainer}\n          >\n            {_value}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  const mode = editingInternal ? _renderEditingMode() : _renderViewMode();\n  const clsName = classnames(\n    props.containerProps?.className ||\n      props.mainContainerClassName ||\n      styles.Editext__main_container,\n    props.className\n  );\n  return (\n    <div\n      {...props.containerProps}\n      className={clsName}\n      // @ts-ignore\n      editext={dataAttributes.mainContainer}\n    >\n      {mode}\n    </div>\n  );\n}\n\nexport default EdiText;\n","// extracted by mini-css-extract-plugin\nexport default {\"heading\":\"tasks_heading__qQdOH\",\"showDataBox\":\"tasks_showDataBox__Ea9dg\",\"bodySpace\":\"tasks_bodySpace__FvEmj\",\"input\":\"tasks_input__fGAA1\",\"select\":\"tasks_select__UC5AL\",\"form\":\"tasks_form__-SXBk\",\"displayData\":\"tasks_displayData__mUImn\",\"btn\":\"tasks_btn__-67ag\",\"clsBtn\":\"tasks_clsBtn__UF8fi\",\"subBtn\":\"tasks_subBtn__tn-9R\",\"label\":\"tasks_label__2o5qy\"};","import { useLocation, useNavigate } from 'react-router-dom'\nimport { useState, useEffect} from 'react';\nimport EdiText from 'react-editext'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addTask, changeTask, deleteTask } from '../redux/dataReducer';\nimport styles from '../css/tasks.module.css';\nfunction CheckTaskUrl() {\n    const location = useLocation();\n    let navigate = useNavigate();\n    const [run, setRun] = useState(false);\n    useEffect(() => {\n        if (location?.pathname.slice(1) === location?.state?.name) {\n            setRun(true);\n        }\n        else {\n            setRun(false);\n            navigate(\"*\");\n        }\n    }, []);\n    return (\n        run &&\n        <Tasks />\n    )\n}\nfunction Tasks() {\n    const location = useLocation();\n    const [btnState, setBtnState] = useState(true);\n    const [filterBtnState, setFilterBtnState] = useState(true);\n    const [inputFilter, setInputFilter] = useState({ taskName: null, dueDate: null, status: 'pending' });\n    const [showData, setShowData] = useState([]);\n    const [filterState, setFilterState] = useState(false);\n    const [updateData, setUpdateData] = useState(0);\n    const [showDataBox,changeShowDataBox] = useState(false);\n    const [showNull,changeShowNull] = useState(\"\");\n    const data = useSelector((state) => state.getData.data);\n    const dispatch = useDispatch();\n    useEffect(() => {\n        displayData();\n    }, [updateData]);\n    useEffect(() => {\n        changeDisplay();\n    }, []);\n    useEffect(() => {\n        changeDisplay();\n    }, [showData]);\n    function changeDisplay(){\n        data[location.state.index].tasks?.length === 0 ? changeShowNull(\"No Task\") : changeShowNull(\"No Result\");\n        showData.length > 0 ? changeShowDataBox(true) : changeShowDataBox(false);\n    }\n    function changeDataOnSave(value, index) {\n        dispatch(changeTask({ userIndex: location.state.index, index: index, value: value }));\n    }\n    function resultJSX(data, index, id) {\n        return (\n            <div key={id} className={styles.displayData}>\n                <EdiText type='text' value={data.taskName} onSave={v => changeDataOnSave(v, index)} />\n                <div>{data.status}</div>\n                <div>{data.dueDate}</div><button onClick={() => removeItem(id)}>Remove</button>\n            </div>\n        )\n    }\n    function displayData() {\n        let temp = [];\n        data[location.state.index].tasks.map(function (data, index) {\n            if (filterState) {\n                if ((data.taskName.toLowerCase().startsWith(inputFilter.taskName?.toLowerCase()) || inputFilter.taskName === null) && (data.dueDate === inputFilter.dueDate || inputFilter.dueDate === null) && data.status === inputFilter.status) {\n                    temp.push(resultJSX(data, index, data.id));\n                }\n            }\n            else {\n                temp.push(resultJSX(data, index, data.id));\n            }\n        })\n        setShowData(temp);\n    }\n    function removeItem(id) {\n        dispatch(deleteTask({ userIndex: location.state.index, id: id }));\n        setUpdateData(updateData + 1);\n    }\n    function displayAll() {\n        setUpdateData(updateData + 1);\n        setFilterState(false)\n    }\n    return (\n        <>\n            <h2 className={styles.heading}>{location?.state?.name} Task</h2>\n            <div className={styles.bodySpace}>\n                {btnState ? <TaskBtn send={setBtnState} /> : <AddTask send={{ setBtnState, setUpdateData, updateData, setFilterState }} />}\n                {filterBtnState ? <FilterTaskBtn send={setFilterBtnState} /> : <SearchFilters send={{ setFilterBtnState, setFilterState, setUpdateData, updateData, inputFilter, setInputFilter }} />}\n                <button className={styles.btn} onClick={displayAll}>Display All</button>\n                {showDataBox ? <><h3>Results</h3><div className={styles.showDataBox}>{showData}</div></> : <h3>{showNull}</h3>}\n            </div>\n        </>\n    )\n}\nfunction TaskBtn(props) {\n    function changeState() {\n        props.send(false);\n    }\n    return <button className={styles.btn} onClick={changeState}>Add Task</button>;\n}\nfunction FilterTaskBtn(props) {\n    function changeState() {\n        props.send(false);\n    }\n    return <button className={styles.btn} onClick={changeState}>Filters</button>;\n}\nfunction AddTask(props) {\n    const location = useLocation();\n    const [getInputData, setGetInputData] = useState({ taskName: null, status: 'pending', dueDate: null });\n    const dispatch = useDispatch();\n    function setInputData(e) {\n        e.preventDefault();\n        dispatch(addTask({ id: Date.now(), userIndex: [location.state.index], taskName: getInputData.taskName, status: getInputData.status, dueDate: getInputData.dueDate }));\n        props.send.setBtnState(true);\n        props.send.setUpdateData(props.send.updateData + 1);\n        props.send.setFilterState(false);\n    }\n    function close() {\n        props.send.setBtnState(true);\n    }\n    return (\n        <form className={styles.form} onSubmit={setInputData}>\n            <input className={styles.input} type='text' autoFocus onChange={(e) => { setGetInputData({ taskName: e.target.value, status: getInputData.status, dueDate: getInputData.dueDate }) }} placeholder=\"Add New Task\" />\n            <div>\n                <label className={styles.label}>Status </label>\n                <select className={styles.select} onChange={(e) => { setGetInputData({ taskName: getInputData.taskName, status: e.target.value, dueDate: getInputData.dueDate }) }}>\n                    <option value='pending'>pending</option>\n                    <option value='completed'>Completed</option>\n                </select>\n            </div>\n            <div>\n                <label className={styles.label}>Due Date </label>\n                <input className={styles.input} type=\"date\" onChange={(e) => { setGetInputData({ taskName: getInputData.taskName, status: getInputData.status, dueDate: e.target.value }) }} />\n            </div>\n            <input className={styles.subBtn} type=\"submit\" />\n            <button className={styles.clsBtn} onClick={close}>Close</button>\n        </form>\n    );\n}\n\nfunction SearchFilters(props) {\n    function filterData(e) {\n        e.preventDefault();\n        props.send.setUpdateData(props.send.updateData + 1);\n        props.send.setFilterState(true);\n        props.send.setFilterBtnState(true);\n    }\n    function close() {\n        props.send.setFilterBtnState(true);\n    }\n    return (\n        <form className={styles.form} onSubmit={filterData}>\n            <input className={styles.input} type=\"text\" onChange={(e) => props.send.setInputFilter({ taskName: e.target.value, dueDate: props.send.inputFilter.dueDate, status: props.send.inputFilter.status })} placeholder=\"Search Text\" />\n            <select className={styles.select} onChange={(e) => props.send.setInputFilter({ taskName: props.send.inputFilter.taskName, dueDate: props.send.inputFilter.dueDate, status: e.target.value })}>\n                <option value='pending'>pending</option>\n                <option value='completed'>Completed</option>\n            </select>\n            <input className={styles.input} type=\"date\" onChange={(e) => props.send.setInputFilter({ taskName: props.send.inputFilter.taskName, dueDate: e.target.value, status: props.send.inputFilter.status })} />\n            <input className={styles.subBtn} type=\"submit\" />\n            <button className={styles.clsBtn} onClick={close}>Close</button>\n        </form>\n    )\n}\n\nexport default CheckTaskUrl;"],"names":["classnames","_i","args","Array","filter","a","join","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","dataAttributes","mode","props","_b","useState","editing","editingInternal","setEditingInternal","_c","valid","setValid","_d","value","valueInternal","setValueInternal","_e","savedValue","setSavedValue","_f","viewFocused","setViewFocused","saveButton","React","editingContainer","editingButtons","handleKeyDown","e","isEnter","some","c","key","code","isEscape","submitOnEnter","handleSave","preventDefault","cancelOnEscape","handleCancel","inputProps","onKeyDown","handleOnBlur","isEditingButton","current","contains","relatedTarget","cancelOnUnfocus","submitOnUnfocus","onBlur","handleViewFocus","startEditingOnFocus","t","viewProps","onFocus","handleKeyDownForView","startEditing","startEditingOnEnter","handleInputChange","target","onChange","val","onCancel","handleActivateEditMode","canEdit","onEditingStart","validation","onValidationFail","onSave","useEffect","console","warn","editButtonDefaultClasses","editButtonClass","viewContainerClass","alignment","buttonsContainerClass","viewClickHandler","_value","inputElem","className","styles","editext","tabIndex","autoFocus","saveButtonDefaultClasses","hideIcons","saveButtonClass","saveButtonClassName","cancelButtonDefaultClasses","cancelButtonClass","cancelButtonClassName","editContainerClass","editContainerClassName","viewContainerClassName","buttonsAlign","onClick","saveButtonContent","cancelButtonContent","validationMessage","hint","editButtonClassName","showButtonsOnHover","editOnViewClick","renderValue","editButtonProps","editButtonContent","clsName","containerProps","mainContainerClassName","Tasks","location","useLocation","btnState","setBtnState","filterBtnState","setFilterBtnState","taskName","dueDate","status","inputFilter","setInputFilter","showData","setShowData","filterState","setFilterState","updateData","setUpdateData","showDataBox","changeShowDataBox","showNull","changeShowNull","data","useSelector","state","getData","dispatch","useDispatch","changeDisplay","index","tasks","length","resultJSX","id","v","changeTask","userIndex","changeDataOnSave","deleteTask","removeItem","temp","map","toLowerCase","startsWith","push","displayData","name","TaskBtn","send","AddTask","FilterTaskBtn","SearchFilters","getInputData","setGetInputData","onSubmit","addTask","Date","now","placeholder","navigate","useNavigate","run","setRun","pathname","slice"],"sourceRoot":""}